#####################################################
###      << 安裝鏈碼 >>                           ###
###      必須將鏈碼安裝到通道中的所有背書節點上   ###
#####################################################

#####################
### 1. 環境變數   ###
#####################

### 鏈碼環境變數

$ export CC_NAME="mycc" && \
  export CC_SRC_PATH="../chaincode/go/" && \
  export CC_RUNTIME_LANGUAGE="golang" && \
  export CC_VERSION="1.0" && \
  export CC_SEQUENCE="1" && \
  export CC_INIT_FCN="initLedger" && \
  export fcn_call='{"function":"'${CC_INIT_FCN}'","Args":[]}' && \
  export INIT_REQUIRED="--init-required" && \
  export CC_END_POLICY="AND('Org1MSP.member','Org2MSP.member')" && \
  export CC_END_POLICY="--signature-policy $CC_END_POLICY" && \
  export PEER_CONN_PARMS="--peerAddresses localhost:7051" && \
  export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles ${PEER0_ORG1_CA}" && \
  export PEER_CONN_PARMS="${PEER_CONN_PARMS} --peerAddresses localhost:9051" && \
  export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles ${PEER0_ORG2_CA}" && \
  export CC_COLL_CONFIG="NA" && \
  export DELAY="3" && \
  export MAX_RETRY="5" && \
  export VERBOSE="false"


##########################################
### 2. Vendoring Go dependencies ...   ###
### Go語言的相依套件管理               ###
##########################################

$ pushd ${CC_SRC_PATH}

$ GO111MODULE=on go mod vendor

$ popd


####################
### 3. 安裝鏈碼  ###
####################

##################################################
### 3-1. 將鏈碼安裝到 peer0.org1.example.com   ###
##################################################

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}


### Package a chaincode and write the package to a file.

$ peer lifecycle chaincode package ${CC_NAME}.tar.gz \
    --path ${CC_SRC_PATH} \
    --lang ${CC_RUNTIME_LANGUAGE} \
    --label ${CC_NAME}_${CC_VERSION}

### Install a chaincode on a peer.
	
$ peer lifecycle chaincode install ${CC_NAME}.tar.gz

	
##################################################
### 3-2. 將鏈碼安裝到 peer0.org2.example.com   ###
##################################################

$ export CORE_PEER_ADDRESS=localhost:9051 && \
  export CORE_PEER_LOCALMSPID="Org2MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG2_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH}

### Package the chaincode and write the package to a file.

$ peer lifecycle chaincode package ${CC_NAME}.tar.gz \
    --path ${CC_SRC_PATH} \
    --lang ${CC_RUNTIME_LANGUAGE} \
    --label ${CC_NAME}_${CC_VERSION}

### Install the chaincode on a peer.

$ peer lifecycle chaincode install ${CC_NAME}.tar.gz


################################################################
### 4. Approve the chaincode definition for my organization. ###
### 每個組織只要選擇一個peer來執行即可                       ###
### 以peer0.org1.example.com為例                             ###
################################################################

######################################################
### 4.1 Approve the chaincode definition for Org1. ###
######################################################

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

### Query the installed chaincodes on a peer.

$ peer lifecycle chaincode queryinstalled >&log.txt

$ PACKAGE_ID=`sed -n '/Package/{s/^Package ID: //; s/, Label:.*$//; p;}' log.txt`

$ echo ${PACKAGE_ID}

### Approve the chaincode definition for my organization.

$ peer lifecycle chaincode approveformyorg \
    -o localhost:7050 \
    --ordererTLSHostnameOverride orderer.example.com \
    --tls \
    --cafile ${ORDERER_CA} \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --package-id ${PACKAGE_ID} \
    --sequence ${CC_SEQUENCE} \
    ${INIT_REQUIRED} \
    --waitForEvent \
    ${CC_END_POLICY}

### Check whether a chaincode definition is ready to be committed on a channel.

$ peer lifecycle chaincode checkcommitreadiness \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --sequence ${CC_SEQUENCE} \
    --output json \
    ${INIT_REQUIRED} \
    ${CC_END_POLICY}


######################################################
### 4.2 Approve the chaincode definition for Org2. ###
######################################################

$ export CORE_PEER_ADDRESS=localhost:9051 && \
  export CORE_PEER_LOCALMSPID="Org2MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG2_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH}

### Query the installed chaincodes on a peer.

$ peer lifecycle chaincode queryinstalled >&log.txt

$ PACKAGE_ID=`sed -n '/Package/{s/^Package ID: //; s/, Label:.*$//; p;}' log.txt`

$ echo ${PACKAGE_ID}

### Approve the chaincode definition for my organization.

$ peer lifecycle chaincode approveformyorg \
    -o localhost:7050 \
    --ordererTLSHostnameOverride orderer.example.com \
    --tls \
    --cafile ${ORDERER_CA} \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --package-id ${PACKAGE_ID} \
    --sequence ${CC_SEQUENCE} \
    ${INIT_REQUIRED} \
    --waitForEvent \
    ${CC_END_POLICY}

### Check whether a chaincode definition is ready to be committed on a channel.

$ peer lifecycle chaincode checkcommitreadiness \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --sequence ${CC_SEQUENCE} \
    --output json \
    ${INIT_REQUIRED} \
    ${CC_END_POLICY}


#############################################################
### 5. Commit the chaincode definition on the channel.    ###
### 透過 peer0.org1.example.com 在通道上提交鏈碼定義。    ###
### 此步驟在一個通道上只做一次即可                        ###
#############################################################

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

### Check whether a chaincode definition is ready to be committed on a channel.

$ peer lifecycle chaincode checkcommitreadiness \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --sequence ${CC_SEQUENCE} \
    --output json \
    ${INIT_REQUIRED} \
    ${CC_END_POLICY}

### Commit the chaincode definition on the channel. 

$ peer lifecycle chaincode commit \
    -o localhost:7050 \
    --ordererTLSHostnameOverride orderer.example.com \
    --tls true \
    --cafile ${ORDERER_CA} \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME} \
    --version ${CC_VERSION} \
    --sequence ${CC_SEQUENCE} \
    ${CC_END_POLICY} \
    ${INIT_REQUIRED} \
    ${PEER_CONN_PARMS}

### Query the committed chaincode definitions by channel on a peer. 
### Optional: provide a chaincode name to query a specific definition.

$ peer lifecycle chaincode querycommitted \
    --channelID ${CHANNEL_NAME} \
    --name ${CC_NAME}


#############################################
### 6. Initializing chaincode on one peer ###
### 在任一個peer節點上執行初始化鏈碼      ###
#############################################

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

### Call the userdefined ${CC_INIT_FCN} function to perform chaincode initialization

$ peer chaincode invoke \
    -o localhost:7050 \
    --ordererTLSHostnameOverride orderer.example.com \
    --isInit \
    --tls true \
    --cafile ${ORDERER_CA} \
    -C ${CHANNEL_NAME} \
    -n ${CC_NAME} \
    ${PEER_CONN_PARMS} \
    --waitForEvent \
    -c ${fcn_call}


######################################
###      區塊鏈網路建立完成        ###
######################################
