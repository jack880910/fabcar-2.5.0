################################
###  以逐步方式執行網路建立  ###
################################

#############################################
### 1. Setting up environmental valiables ###
###    設定環境變數                       ###
#############################################

$ cd ~/fabric-proj/fabcar/network

### docker-compose file環境變數

$ export IMAGETAG=latest && \
  export CA_IMAGETAG=latest && \
  export DATABASE=couchdb && \
  export COMPOSE_FILE_BASE=compose-test-net.yaml && \
  export COMPOSE_FILE_COUCH=compose-couch.yaml && \
  export COMPOSE_FILE_CA=compose-ca.yaml && \
  export CONTAINER_CLI=docker && \
  export CONTAINER_CLI_COMPOSE=${CONTAINER_CLI}-compose


### Get docker sock path from environment variable

$ SOCK="${DOCKER_HOST:-/var/run/docker.sock}"

$ DOCKER_SOCK="${SOCK##unix://}"

### 節點環境變數

$ export CHANNEL_NAME=mychannel && \
  export CORE_PEER_TLS_ENABLED=true && \
  export ORDERER1_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export ORDERER2_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export ORDERER3_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export PEER0_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt && \
  export PEER1_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt && \
  export PEER0_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt && \
  export PEER1_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt && \
  export ORG1_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp && \
  export ORG2_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp && \
  export ORDERER1_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt && \
  export ORDERER1_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.key && \
  export ORDERER2_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt && \
  export ORDERER2_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key && \
  export ORDERER3_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt && \
  export ORDERER3_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key


##################################################
### 2. Generate certificates using fabric CA   ###
### 使用"fabric CA"產生身份證書                ###
##################################################

$ rm -Rf organizations/peerOrganizations && rm -Rf organizations/ordererOrganizations

$ IMAGE_TAG=${CA_IMAGETAG} docker-compose -f compose/$COMPOSE_FILE_CA up -d 2>&1

$ docker ps -a --format="table {{.ID}}\t{{.Names}}\t{{.Status}}"

$ chmod +x ./organizations/fabric-ca/registerEnroll.sh

$ . organizations/fabric-ca/registerEnroll.sh

### Creating Org1 Identities

$ createOrg1

### Creating Org2 Identities

$ createOrg2

### Creating Orderer Org Identities

$ createOrderer


##########################################################
####   Generate CCP files for Org1 and Org2          #####
####   產生組織的應用程式區塊鏈網路連線設定檔        #####
##########################################################

$ chmod +x ./organizations/ccp-generate.sh && \
    ./organizations/ccp-generate.sh


###########################
### 3. Configtxgen      ###
### 產生交易配置文件    ###
###########################

#############################################
### 3-1. Generating Orderer Genesis block ###
###      產生系統通道初始區塊文件         ###
#############################################

# fabric 2.3.1以後的版本沒有此步驟
# 目前已不需要創建系統通道

####################################################################
### 3-2. Write a genesis block to mychannel.block for the        ###
###      channel mychannel for profile TwoOrgsApplicationGenesis ###
###      產生新建應用通道的創世區塊                                ###
####################################################################

### Tell the configtxgen tool where to look for the configtx.yaml file that it needs to ingest.
### $ export FABRIC_CFG_PATH=${PWD}/configtx
### can also be set by the -configPath flag in the configtxgen command 

$ rm -rf channel-artifacts && mkdir channel-artifacts

$ configtxgen \
  -profile TwoOrgsApplicationGenesis \
  -outputBlock ./channel-artifacts/${CHANNEL_NAME}.block \
  -channelID ${CHANNEL_NAME} \
  -configPath ./configtx


############################################
### 4. 啟動Orderer節點、Peer節點的容器   ###
############################################

### path to the orderer.yaml and core.yaml

$ export FABRIC_CFG_PATH=../config

$ COMPOSE_FILES="-f compose/${COMPOSE_FILE_BASE} -f compose/${CONTAINER_CLI}/${CONTAINER_CLI}-${COMPOSE_FILE_BASE}"

$ COMPOSE_FILES="${COMPOSE_FILES} -f compose/${COMPOSE_FILE_COUCH} -f compose/${CONTAINER_CLI}/${CONTAINER_CLI}-${COMPOSE_FILE_COUCH}"

$ IMAGE_TAG=${IMAGETAG} DOCKER_SOCK="${DOCKER_SOCK}" docker-compose ${COMPOSE_FILES} up -d 2>&1

$ docker ps -a --format="table {{.ID}}\t{{.Names}}\t{{.Status}}"


#######################################
###     5. Creating channel         ###
###          建立應用通道            ###
#######################################

# 在無系統通道的情況下使用osnadmin創建應用通道
# Join an Ordering Service Node (OSN) to a channel. 
# If the channel does not yet exist, it will be created.

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

$ export FABRIC_CFG_PATH=../config


# 將orderer1.example.com加入應用通道mychannel中 (admin port 7053:7053)

$ osnadmin channel join \
  --channelID $CHANNEL_NAME \
  --config-block ./channel-artifacts/${CHANNEL_NAME}.block \
  -o localhost:7053 \
  --ca-file "$ORDERER1_CA" \
  --client-cert "$ORDERER1_ADMIN_TLS_SIGN_CERT" \
  --client-key "$ORDERER1_ADMIN_TLS_PRIVATE_KEY"


# 將orderer2.example.com加入應用通道mychannel中 (admin port 8053:7053)

$ osnadmin channel join \
  --channelID $CHANNEL_NAME \
  --config-block ./channel-artifacts/${CHANNEL_NAME}.block \
  -o localhost:8053 \
  --ca-file "$ORDERER2_CA" \
  --client-cert "$ORDERER2_ADMIN_TLS_SIGN_CERT" \
  --client-key "$ORDERER2_ADMIN_TLS_PRIVATE_KEY"


# 將orderer3.example.com加入應用通道mychannel中 (admin port 9053:7053)

$ osnadmin channel join \
  --channelID $CHANNEL_NAME \
  --config-block ./channel-artifacts/${CHANNEL_NAME}.block \
  -o localhost:9053 \
  --ca-file "$ORDERER3_CA" \
  --client-cert "$ORDERER3_ADMIN_TLS_SIGN_CERT" \
  --client-key "$ORDERER3_ADMIN_TLS_PRIVATE_KEY"


#########################################
### 6. Joining the peer to a channel  ###
#########################################

###############################################
### 6-1. 將peer0.org1.example.com加入通道   ###
###############################################

$ export CORE_PEER_ADDRESS=localhost:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

$ export FABRIC_CFG_PATH=$PWD/../config/

$ peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block

###############################################
### 6-2. 將peer1.org1.example.com加入通道   ###
###############################################

$ export CORE_PEER_ADDRESS=localhost:8051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER1_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}

$ export FABRIC_CFG_PATH=$PWD/../config/

$ peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block


###############################################
### 6-3. 將peer0.org2.example.com加入通道   ###
###############################################

$ export CORE_PEER_ADDRESS=localhost:9051 && \
  export CORE_PEER_LOCALMSPID="Org2MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG2_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH}

$ export FABRIC_CFG_PATH=$PWD/../config/

$ peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block


###############################################
### 6-4. 將peer1.org2.example.com加入通道   ###
###############################################

$ export CORE_PEER_ADDRESS=localhost:10051 && \
  export CORE_PEER_LOCALMSPID="Org2MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER1_ORG2_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH}

$ export FABRIC_CFG_PATH=$PWD/../config/

$ peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block


#######################################################
### 7. Updating anchor peers on "${CHANNEL_NAME}"   ###
###      更新錨節點配置                             ###
#######################################################

###########################################################################
### 7-1. Updating anchor peers for org "Org1MSP" on "${CHANNEL_NAME}"   ###
###        更新Org1MSP的錨節點配置                                      ###
###        將peer0.org1.example.com指定為Org1MSP的錨節點                ###
###########################################################################

##################################################
### A. Creating anchor peer update for Org1MSP ###
###      產生Org1MSP錨節點配置更新文件         ###
##################################################

# NOTE: this must be run in a CLI container since it requires jq and configtxlator 
# 注意：在cli容器中不可以使用localhost，必須使用類似peer0.org1.example.com
#       這樣的主機名稱，否則會有找不到主機的錯誤。

$ sudo apt install jq

$ docker exec -it -e LINES=$(tput lines) -e COLUMNS=$(tput cols) cli bash


### 節點環境變數

$ export CHANNEL_NAME=mychannel && \
  export CORE_PEER_TLS_ENABLED=true && \
  export ORDERER1_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export ORDERER2_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export ORDERER3_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp/tlscacerts/tlsca.example.com-cert.pem && \
  export PEER0_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt && \
  export PEER1_ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt && \
  export PEER0_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt && \
  export PEER1_ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt && \
  export ORG1_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp && \
  export ORG2_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp && \
  export ORDERER1_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.crt && \
  export ORDERER1_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/server.key && \
  export ORDERER2_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt && \
  export ORDERER2_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key && \
  export ORDERER3_ADMIN_TLS_SIGN_CERT=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt && \
  export ORDERER3_ADMIN_TLS_PRIVATE_KEY=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key


$ export CORE_PEER_ADDRESS=peer0.org1.example.com:7051 && \
  export CORE_PEER_LOCALMSPID="Org1MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG1_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH}


$ peer channel fetch config config_block.pb \
    -o orderer1.example.com:7050 \
    --ordererTLSHostnameOverride orderer1.example.com \
    -c $CHANNEL_NAME \
    --tls \
    --cafile "$ORDERER1_CA"

$ configtxlator proto_decode \
    --input config_block.pb \
    --type common.Block | jq .data.data[0].payload.data.config >"${CORE_PEER_LOCALMSPID}config.json"

# for org1

$ HOST="peer0.org1.example.com" && \
  PORT=7051

$ jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "'$HOST'","port": '$PORT'}]},"version": "0"}}' ${CORE_PEER_LOCALMSPID}config.json > ${CORE_PEER_LOCALMSPID}modified_config.json

$ ORIGINAL=${CORE_PEER_LOCALMSPID}config.json && \
  MODIFIED=${CORE_PEER_LOCALMSPID}modified_config.json && \
  OUTPUT=${CORE_PEER_LOCALMSPID}anchors.tx

$ configtxlator proto_encode --input "${ORIGINAL}" --type common.Config >original_config.pb

$ configtxlator proto_encode --input "${MODIFIED}" --type common.Config >modified_config.pb

$ configtxlator compute_update --channel_id "${CHANNEL_NAME}" --original original_config.pb --updated modified_config.pb >config_update.pb

$ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate >config_update.json

$ echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . >config_update_in_envelope.json

$ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope >"${OUTPUT}"


#############################
### B. update anchor peer ###
#############################

$ peer channel update \
  -o orderer1.example.com:7050 \
  --ordererTLSHostnameOverride orderer1.example.com \
  -c ${CHANNEL_NAME} \
  -f ${CORE_PEER_LOCALMSPID}anchors.tx \
  --tls \
  --cafile "${ORDERER1_CA}"


###########################################################################
### 7-2. Updating anchor peers for org "Org2MSP" on "${CHANNEL_NAME}"   ###
###        更新Org2MSP的錨節點配置                                      ###
###        將peer0.org2.example.com指定為Org2MSP的錨節點                ###
###########################################################################

####################################
### A. create anchor-peer update ###
####################################

$ export CORE_PEER_ADDRESS=peer0.org2.example.com:7051 && \
  export CORE_PEER_LOCALMSPID="Org2MSP" && \
  export CORE_PEER_TLS_ROOTCERT_FILE=${PEER0_ORG2_CA} && \
  export CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH}

$ peer channel fetch config config_block.pb \
  -o orderer1.example.com:7050 \
	--ordererTLSHostnameOverride orderer1.example.com \
	-c ${CHANNEL_NAME} \
	--tls \
	--cafile "${ORDERER1_CA}"

$ configtxlator proto_decode \
  --input config_block.pb \
  --type common.Block | jq .data.data[0].payload.data.config >"${CORE_PEER_LOCALMSPID}config.json"


# for org2

$ HOST="peer0.org2.example.com" && \
  PORT=7051

$ jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "'$HOST'","port": '$PORT'}]},"version": "0"}}' ${CORE_PEER_LOCALMSPID}config.json > ${CORE_PEER_LOCALMSPID}modified_config.json

$ ORIGINAL=${CORE_PEER_LOCALMSPID}config.json && \
  MODIFIED=${CORE_PEER_LOCALMSPID}modified_config.json && \
  OUTPUT=${CORE_PEER_LOCALMSPID}anchors.tx

$ configtxlator proto_encode --input "${ORIGINAL}" --type common.Config >original_config.pb

$ configtxlator proto_encode --input "${MODIFIED}" --type common.Config >modified_config.pb

$ configtxlator compute_update --channel_id "${CHANNEL_NAME}" --original original_config.pb --updated modified_config.pb >config_update.pb

$ configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate >config_update.json

$ echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . >config_update_in_envelope.json

$ configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope >"${OUTPUT}"


#############################
### B. update anchor peer ###
#############################

$ peer channel update \
  -o orderer1.example.com:7050 \
  --ordererTLSHostnameOverride orderer1.example.com \
  -c ${CHANNEL_NAME} \
  -f ${CORE_PEER_LOCALMSPID}anchors.tx \
  --tls \
  --cafile "${ORDERER1_CA}"


# 離開cli容器

$ exit
